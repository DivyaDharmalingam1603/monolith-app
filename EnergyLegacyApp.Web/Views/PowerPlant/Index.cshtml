@model IEnumerable<EnergyLegacyApp.Data.Models.PowerPlant>

@{
    ViewData["Title"] = "Power Plants";
}

<div class="row mb-4">
    <div class="col-md-8">
        <h1 class="display-5 text-primary">
            <i class="fas fa-industry me-3"></i>Power Plants Management
        </h1>
        <p class="lead">Monitor and manage all power generation facilities</p>
    </div>
    <div class="col-md-4 text-end">
        <a href="@Url.Action("Create")" class="btn btn-success btn-lg">
            <i class="fas fa-plus me-2"></i>Add New Plant
        </a>
    </div>
</div>

<!-- Filter and Search Bar -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="input-group">
            <span class="input-group-text"><i class="fas fa-search"></i></span>
            <input type="text" class="form-control" id="searchInput" placeholder="Search power plants...">
        </div>
    </div>
    <div class="col-md-3">
        <select class="form-select" id="typeFilter">
            <option value="">All Types</option>
            <option value="Coal">Coal</option>
            <option value="Gas">Gas</option>
            <option value="Nuclear">Nuclear</option>
            <option value="Solar">Solar</option>
            <option value="Wind">Wind</option>
            <option value="Hydro">Hydro</option>
        </select>
    </div>
    <div class="col-md-3">
        <select class="form-select" id="statusFilter">
            <option value="">All Status</option>
            <option value="Active">Active</option>
            <option value="Maintenance">Maintenance</option>
            <option value="Decommissioned">Decommissioned</option>
        </select>
    </div>
</div>

<!-- Power Plants Table -->
<div class="card shadow">
    <div class="card-header py-3 d-flex justify-content-between align-items-center">
        <h6 class="m-0 font-weight-bold text-primary">
            <i class="fas fa-table me-2"></i>Power Plants (@(Model?.Count() ?? 0) total)
        </h6>
        <div>
            <a href="@Url.Action("ExportCsv")" class="btn btn-sm btn-outline-primary">
                <i class="fas fa-download me-1"></i>Export CSV
            </a>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover" id="powerPlantsTable">
                <thead class="table-dark">
                    <tr>
                        <th><i class="fas fa-hashtag me-1"></i>ID</th>
                        <th><i class="fas fa-building me-1"></i>Name</th>
                        <th><i class="fas fa-cog me-1"></i>Type</th>
                        <th><i class="fas fa-bolt me-1"></i>Capacity (MW)</th>
                        <th><i class="fas fa-map-marker-alt me-1"></i>Location</th>
                        <th><i class="fas fa-info-circle me-1"></i>Status</th>
                        <th><i class="fas fa-tachometer-alt me-1"></i>Current Output</th>
                        <th><i class="fas fa-percentage me-1"></i>Efficiency</th>
                        <th><i class="fas fa-tools me-1"></i>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var plant in Model)
                        {
                            <tr>
                                <td>@plant.Id</td>
                                <td>
                                    <strong>@plant.Name</strong><br>
                                    <small class="text-muted">@plant.OperatorCompany</small>
                                </td>
                                <td>
                                    <span class="badge bg-@GetTypeColor(plant.Type)">
                                        @Html.Raw(GetTypeIcon(plant.Type)) @plant.Type
                                    </span>
                                </td>
                                <td>@plant.Capacity.ToString("N0")</td>
                                <td>@plant.Location</td>
                                <td>
                                    <span class="badge bg-@GetStatusColor(plant.Status)">
                                        @Html.Raw(GetStatusIcon(plant.Status)) @plant.Status
                                    </span>
                                </td>
                                <td>
                                    @plant.CurrentOutput.ToString("N1") MW
                                    <div class="progress mt-1" style="height: 5px;">
                                        <div class="progress-bar" role="progressbar" 
                                             style="width: @((plant.Capacity > 0 ? (plant.CurrentOutput / plant.Capacity * 100) : 0).ToString("N0"))%"
                                             aria-valuenow="@plant.CurrentOutput" 
                                             aria-valuemin="0" 
                                             aria-valuemax="@plant.Capacity">
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-@GetEfficiencyColor(plant.EfficiencyRating)">
                                        @((plant.EfficiencyRating * 100).ToString("N1"))%
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="@Url.Action("Details", new { id = plant.Id })" 
                                           class="btn btn-sm btn-outline-info" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="@Url.Action("Edit", new { id = plant.Id })" 
                                           class="btn btn-sm btn-outline-warning" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <a href="@Url.Action("Delete", new { id = plant.Id })" 
                                           class="btn btn-sm btn-outline-danger" 
                                           onclick="return confirm('Are you sure you want to delete this power plant?')"
                                           title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9" class="text-center py-4">
                                <i class="fas fa-info-circle text-muted me-2"></i>
                                No power plants found. <a href="@Url.Action("Create")">Add the first one</a>.
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ANTI-PATTERN: Client-side filtering instead of server-side
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const typeFilter = document.getElementById('typeFilter');
            const statusFilter = document.getElementById('statusFilter');
            const table = document.getElementById('powerPlantsTable');
            const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

            function filterTable() {
                const searchTerm = searchInput.value.toLowerCase();
                const typeValue = typeFilter.value;
                const statusValue = statusFilter.value;

                for (let i = 0; i < rows.length; i++) {
                    const row = rows[i];
                    const cells = row.getElementsByTagName('td');
                    
                    if (cells.length > 1) {
                        const name = cells[1].textContent.toLowerCase();
                        const type = cells[2].textContent;
                        const status = cells[5].textContent;
                        
                        const matchesSearch = name.includes(searchTerm);
                        const matchesType = !typeValue || type.includes(typeValue);
                        const matchesStatus = !statusValue || status.includes(statusValue);
                        
                        if (matchesSearch && matchesType && matchesStatus) {
                            row.style.display = '';
                        } else {
                            row.style.display = 'none';
                        }
                    }
                }
            }

            searchInput.addEventListener('keyup', filterTable);
            typeFilter.addEventListener('change', filterTable);
            statusFilter.addEventListener('change', filterTable);
        });
    </script>
}

@functions {
    // ANTI-PATTERN: Helper methods in view instead of separate helper class
    string GetTypeColor(string type)
    {
        return type switch
        {
            "Coal" => "dark",
            "Gas" => "primary",
            "Nuclear" => "warning",
            "Solar" => "success",
            "Wind" => "info",
            "Hydro" => "secondary",
            _ => "light"
        };
    }
    
    string GetTypeIcon(string type)
    {
        return type switch
        {
            "Coal" => "<i class='fas fa-fire'></i>",
            "Gas" => "<i class='fas fa-burn'></i>",
            "Nuclear" => "<i class='fas fa-atom'></i>",
            "Solar" => "<i class='fas fa-sun'></i>",
            "Wind" => "<i class='fas fa-wind'></i>",
            "Hydro" => "<i class='fas fa-water'></i>",
            _ => "<i class='fas fa-bolt'></i>"
        };
    }
    
    string GetStatusColor(string status)
    {
        return status switch
        {
            "Active" => "success",
            "Maintenance" => "warning",
            "Decommissioned" => "danger",
            _ => "secondary"
        };
    }
    
    string GetStatusIcon(string status)
    {
        return status switch
        {
            "Active" => "<i class='fas fa-check-circle'></i>",
            "Maintenance" => "<i class='fas fa-wrench'></i>",
            "Decommissioned" => "<i class='fas fa-times-circle'></i>",
            _ => "<i class='fas fa-question-circle'></i>"
        };
    }
    
    string GetEfficiencyColor(decimal efficiency)
    {
        if (efficiency >= 0.9m) return "success";
        if (efficiency >= 0.7m) return "warning";
        return "danger";
    }
}
